2021/01/14
***인접행렬과 인접리스트의 성능 차이를 기록해보고 DFS/BFS 개념 정리하기 ***
※그래프 기본 개념
 노드: 정점(꼭짓점이라고 생각하기)
 간선: 노드와 노드간의 연결선을 의미한다.


1.인접행렬
 인접행렬은 간단히 2차원 배열로 행렬을 만들어 그래프를 구현한 것으로 생각하면 편하다.
 특징으로는 행렬의 대각 기준으로 값이 대칭을 이룸
	(0,0)(1,1)(2,2)...등을 기준으로 (n,m)과(m,n)은 서로 대칭을 이룬다.
	존재하지 않는 간선을 일반적으로 0or무한비용으로 정의 하기도 한다.
 장점
  인접행렬의 장점은 "특정한 노드가 연결되어 있는지"에 대한 정보를 얻는 속도가 빠르다.
  그 이유는 인접행렬arry가 존재할 때 특정 노드n,m이 연결유무를 확인시 arry[n][m]or[m][n]을 확인하면 되기때문이다.
 단점
  단점은 불필요한 메모리가 낭비 될 수 있다는 것이다.
  행렬 그래프를 나타내게 된다면 N*N만큼의 자원을 할당하게 되는데 이때 존재하지 않는 간선또한 자원을 사용하기 때문에
  불필요한 자원이 발생 한다.

 2.인접 리스트 방식
  인접 리스트 방식은 2차원 리스트를 생하여 행(row)을 기준노드로 가정하여 연결된 노드와 간선을 저장한다.
  ex)노드0을 기준으로 노드3간에 간선7이 존재하는 것을 표현 하는법
      arry=[[]* for _ in range(n)]
      arry[0].append((3,7))

 장점
   인접 리스트의 장점은 존재하지 않는 간선을 표현하는 자원이 필요하지 않기 때문에 메모리를 효율적을 사용할 수 있다.
 단점
   단점은 특정 노드n,m간의 간선 유무를 확인할 때 1개의 노드에 대한 인접 리스트를 앞부터 차례대로 확인해야 함으로
   모든 인접 노드를 순회하여 인접 행렬보다 느린 속도로 데이터를 찾는다.
