2021.01.22
다이나믹 프로그래밍 기초
 "중복되는 연산을 줄이자"
 큰 문제를 작게 나누고 같은 문제라면 한 번씩만 풀어 효율적으로 문제를 수행할 수 있는 방법.
 최적의 해를 구하기 위해 메모리 공간을 약간 더 사용하여 연산 속도를 비약적으로 증가 시킬 수 있는 방법
 조건
  1.큰 문제를 작은 문제로 나눌 수 있다.
  2.작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에도 동일하다.

 대표적인 문제
  피보나치 수열

 방식
 1.탑다운 방식(Top-Down)
  상향식
  메모이제이션(Memoization)기법을 활용하여 큰 문제를 해결하기 위해 작은 문제를 호출
  재귀함수를 활용한다.  
※메모이제이션
     한번 구현한 결과를 메모리 공간에 메모하여 같은 식을 다시 호출 시 해당 결과를 가져오는 법
     캐싱(Caching)--> 값을 저장하는 방법
  시간 복잡도
   O(N)

 2.보텀업 방식(Bottom-Up)--- 권장
  하향식
  탑다운 방식의 재귀함수 사용시 오버해드(Overhead)가 발생 할 수 있다는 문제를 줄일 수 있는 방식
  작은 문제무터 차근차근 답을 도출하는 방식
  반복문을 활용한다.
  저장용 리스트 --> DP테이블

 수열처럼 연속 적이지않은 경우(일부 작은 문제에 대한 해답을 피요시)
   메모이제이션 기법과 딕트(dict) 자료형을 사용하여 계산 하면 효율적이다.

****완전 탐색 알고리즘을 접근했지만 시간이 매우 오래걸리면 다이나믹을 생각하며 부분 문제들의 중복 여부 확인 